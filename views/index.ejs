<!DOCTYPE html>
<html>
  <head>
    <title>MediaRecorder API - Sample</title>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="keywords" content="WebRTC getUserMedia MediaRecorder API">
    <link type="text/css" rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.6/css/bootstrap.min.css">
    <style>
      button{
        margin: 10px 5px;
      }
      li{
        margin: 10px;
      }
      body{
        width: 90%;
        max-width: 960px;
        margin: 0px auto;        
      }
    </style>
  </head>
  <body>
    <h1> MediaRecorder API example</h1>

    <p> For now it is supported only in Firefox(v25+) and Chrome(v47+)</p>
    <button class="btn btn-default"  id='media'>Request Stream</button>
    <button  class="btn btn-default" id='start'>Start</button>
    <button  class="btn btn-default" id='stop'>Stop</button>
    <ul  class="list-unstyled" id='ul'></ul>
    <a href="upload/audio.ogg"> dwn</a>
    <script src="https://code.jquery.com/jquery-2.2.0.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.6/js/bootstrap.min.js"></script>
    <script >
        'use strict'

        let log = console.log.bind(console),
            id = val => document.getElementById(val),
            ul = id('ul'),
            media = id('media'),
            start = id('start'),
            stop = id('stop'),
            stream,
            recorder,
            counter=1,
            chunks;

        start.disabled = stop.disabled = true;


        media.onclick = e => navigator.mediaDevices.getUserMedia({audio:true}).then(_stream => {
            stream = _stream;
            media.style.display = 'none';
            start.removeAttribute('disabled');
            recorder = new MediaRecorder(stream);
            recorder.ondataavailable = e => {
                chunks.push(e.data);
                if(recorder.state == 'inactive')  makeLink();
            };
            log('got media successfully');
        }).catch(log);

        start.onclick = e => {
            start.disabled = true;
            stop.removeAttribute('disabled');
            chunks=[];
            recorder.start();
        }


        stop.onclick = e => {
            stop.disabled = true;
            recorder.stop();
            start.removeAttribute('disabled');

        }

        function makeLink(){
            let blob = new Blob(chunks, { 'type' : 'audio/ogg; codecs=opus' })
                , url = URL.createObjectURL(blob)
                , li = document.createElement('li')
                , au = document.createElement('audio')
                , hf = document.createElement('a')
            ;
            au.controls = true;
            au.src = url;
            hf.href = url;
            hf.download = `${counter++}.ogg`;
            hf.innerHTML = `donwload ${hf.download}`;
            li.appendChild(au);
            li.appendChild(hf);
            ul.appendChild(li);
            var xhr=new XMLHttpRequest();
            xhr.onload=function(e) {
                if(this.readyState === 4) {
                    console.log("Server returned: ",e.target.responseText);
                }
            };
            var fd=new FormData();
            fd.append("audiodata",blob, "filename");
            xhr.open("POST","/upload",true);
            xhr.send(fd);

        }



    </script>
  </body>
</html>